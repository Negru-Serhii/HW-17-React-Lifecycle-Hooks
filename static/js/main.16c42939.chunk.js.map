{"version":3,"sources":["components/Timer.js","App.js","reportWebVitals.js","index.js"],"names":["Timer","startTimer","step","autoplay","id","useState","time","setTime","activeTimer","setActiveTimer","widthTimerLine","setWidthTimerLine","stepInPx","useEffect","document","getElementById","style","width","visualTimer","setInterval","clearInterval","className","onClick","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"2QA8CeA,MA5Cf,YAAoD,IAAnCC,EAAkC,EAAlCA,WAAYC,EAAsB,EAAtBA,KAAMC,EAAgB,EAAhBA,SAAUC,EAAM,EAANA,GAAM,EACzBC,mBAASJ,GADgB,mBAC1CK,EAD0C,KACpCC,EADoC,OAEXF,qBAASF,GAFE,mBAE1CK,EAF0C,KAE7BC,EAF6B,OAGLJ,mBAAS,OAHJ,mBAG1CK,EAH0C,KAG1BC,EAH0B,KAI3CC,EAAWF,EAAiBJ,EA6BlC,OAlBAO,qBAAU,WACRC,SAASC,eAAT,UAA2BX,IAAMY,MAAMC,MAAQP,EAAiB,IAEhE,IAAMQ,EAAcC,aAAY,WACjB,IAATb,GAAcE,GAEhBD,EAAQD,EAAOJ,GACfS,EAAkBD,EAAiBE,EAAWV,IAEzCM,GAAaC,GAAe,KAnBpB,IAqBdP,GAEH,OAAO,WACLkB,cAAcF,OAKhB,sBAAKG,UAAU,QAAf,UACE,4BAAIf,IACJ,wBAAQgB,QA7BQ,WAClBb,GAAgBD,GACH,IAATF,IACFK,EAAkB,OAClBJ,EAAQN,KAyBR,SACGO,GAAwB,IAATF,EAAa,QAAU,UAEzC,qBAAKe,UAAU,OAAOjB,GAAIA,QCfjBmB,MAvBf,WAeE,OACE,gCACE,cAAC,EAAD,eAhBe,CACjBtB,WAAY,GACZC,KAAM,EACNC,UAAU,EACVC,GAAI,KAaF,cAAC,EAAD,eAVgB,CAClBH,WAAY,GACZC,KAAM,EACNC,UAAU,EACVC,GAAI,SCHOoB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFrB,SAASC,eAAe,SAM1BS,M","file":"static/js/main.16c42939.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\n\r\nfunction Timer({ startTimer, step, autoplay, id }) {\r\n  const [time, setTime] = useState(startTimer);\r\n  const [activeTimer, setActiveTimer] = useState(autoplay ? true : false);\r\n  const [widthTimerLine, setWidthTimerLine] = useState(\"100\");\r\n  const stepInPx = widthTimerLine / time;\r\n  const timerValue = 1000;\r\n\r\n  const clickButton = () => {\r\n    setActiveTimer(!activeTimer);\r\n    if (time === 0) {\r\n      setWidthTimerLine(\"100\");\r\n      setTime(startTimer);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    document.getElementById(`${id}`).style.width = widthTimerLine + \"%\";\r\n\r\n    const visualTimer = setInterval(function () {\r\n      if (time !== 0 && activeTimer) {\r\n        <p>{time}</p>;\r\n        setTime(time - step);\r\n        setWidthTimerLine(widthTimerLine - stepInPx * step);\r\n      } else {\r\n        if (!activeTimer) setActiveTimer(false);\r\n      }\r\n    }, step * timerValue);\r\n\r\n    return function stopTimer() {\r\n      clearInterval(visualTimer);\r\n    };\r\n  });\r\n\r\n  return (\r\n    <div className=\"timer\">\r\n      <p>{time}</p>\r\n      <button onClick={clickButton}>\r\n        {activeTimer && time !== 0 ? \"Pause\" : \"Start\"}\r\n      </button>\r\n      <div className=\"line\" id={id}></div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Timer;\r\n","import \"./App.css\";\nimport Timer from \"./components/Timer\";\n\nfunction App() {\n  const firstTimer = {\n    startTimer: 10,\n    step: 1,\n    autoplay: true,\n    id: 1,\n  };\n\n  const secondTimer = {\n    startTimer: 10,\n    step: 2,\n    autoplay: false,\n    id: 2,\n  };\n\n  return (\n    <div>\n      <Timer {...firstTimer} />\n      <Timer {...secondTimer} />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}